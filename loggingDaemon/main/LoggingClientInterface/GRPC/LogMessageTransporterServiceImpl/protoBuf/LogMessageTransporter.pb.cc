// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogMessageTransporter.proto

#include "LogMessageTransporter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace logmessagetransporter {
class MessagesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Messages> _instance;
} _Messages_default_instance_;
class AcknowledgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Acknowledge> _instance;
} _Acknowledge_default_instance_;
}  // namespace logmessagetransporter
static void InitDefaultsscc_info_Acknowledge_LogMessageTransporter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logmessagetransporter::_Acknowledge_default_instance_;
    new (ptr) ::logmessagetransporter::Acknowledge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logmessagetransporter::Acknowledge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Acknowledge_LogMessageTransporter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Acknowledge_LogMessageTransporter_2eproto}, {}};

static void InitDefaultsscc_info_Messages_LogMessageTransporter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logmessagetransporter::_Messages_default_instance_;
    new (ptr) ::logmessagetransporter::Messages();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logmessagetransporter::Messages::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Messages_LogMessageTransporter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Messages_LogMessageTransporter_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_LogMessageTransporter_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_LogMessageTransporter_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_LogMessageTransporter_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_LogMessageTransporter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::logmessagetransporter::Messages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::logmessagetransporter::Messages, size_),
  PROTOBUF_FIELD_OFFSET(::logmessagetransporter::Messages, logmessages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::logmessagetransporter::Acknowledge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::logmessagetransporter::Acknowledge, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::logmessagetransporter::Messages)},
  { 7, -1, sizeof(::logmessagetransporter::Acknowledge)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::logmessagetransporter::_Messages_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::logmessagetransporter::_Acknowledge_default_instance_),
};

const char descriptor_table_protodef_LogMessageTransporter_2eproto[] =
  "\n\033LogMessageTransporter.proto\022\025logmessag"
  "etransporter\"-\n\010Messages\022\014\n\004size\030\001 \001(\005\022\023"
  "\n\013logMessages\030\002 \001(\t\"\035\n\013Acknowledge\022\016\n\006re"
  "sult\030\001 \001(\0102q\n\025LogMessageTransporter\022X\n\017s"
  "endLogMessages\022\037.logmessagetransporter.M"
  "essages\032\".logmessagetransporter.Acknowle"
  "dge\"\000B\t\n\007ex.grpcb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_LogMessageTransporter_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_LogMessageTransporter_2eproto_sccs[2] = {
  &scc_info_Acknowledge_LogMessageTransporter_2eproto.base,
  &scc_info_Messages_LogMessageTransporter_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_LogMessageTransporter_2eproto_once;
static bool descriptor_table_LogMessageTransporter_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LogMessageTransporter_2eproto = {
  &descriptor_table_LogMessageTransporter_2eproto_initialized, descriptor_table_protodef_LogMessageTransporter_2eproto, "LogMessageTransporter.proto", 264,
  &descriptor_table_LogMessageTransporter_2eproto_once, descriptor_table_LogMessageTransporter_2eproto_sccs, descriptor_table_LogMessageTransporter_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_LogMessageTransporter_2eproto::offsets,
  file_level_metadata_LogMessageTransporter_2eproto, 2, file_level_enum_descriptors_LogMessageTransporter_2eproto, file_level_service_descriptors_LogMessageTransporter_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_LogMessageTransporter_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_LogMessageTransporter_2eproto), true);
namespace logmessagetransporter {

// ===================================================================

void Messages::InitAsDefaultInstance() {
}
class Messages::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Messages::kSizeFieldNumber;
const int Messages::kLogMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Messages::Messages()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:logmessagetransporter.Messages)
}
Messages::Messages(const Messages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  logmessages_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.logmessages().size() > 0) {
    logmessages_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logmessages_);
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:logmessagetransporter.Messages)
}

void Messages::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Messages_LogMessageTransporter_2eproto.base);
  logmessages_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
}

Messages::~Messages() {
  // @@protoc_insertion_point(destructor:logmessagetransporter.Messages)
  SharedDtor();
}

void Messages::SharedDtor() {
  logmessages_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Messages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Messages& Messages::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Messages_LogMessageTransporter_2eproto.base);
  return *internal_default_instance();
}


void Messages::Clear() {
// @@protoc_insertion_point(message_clear_start:logmessagetransporter.Messages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logmessages_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Messages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string logMessages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_logmessages(), ptr, ctx, "logmessagetransporter.Messages.logMessages");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Messages::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:logmessagetransporter.Messages)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 size = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string logMessages = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_logmessages()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->logmessages().data(), static_cast<int>(this->logmessages().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "logmessagetransporter.Messages.logMessages"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logmessagetransporter.Messages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logmessagetransporter.Messages)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Messages::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logmessagetransporter.Messages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // string logMessages = 2;
  if (this->logmessages().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->logmessages().data(), static_cast<int>(this->logmessages().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "logmessagetransporter.Messages.logMessages");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->logmessages(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:logmessagetransporter.Messages)
}

::PROTOBUF_NAMESPACE_ID::uint8* Messages::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:logmessagetransporter.Messages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  // string logMessages = 2;
  if (this->logmessages().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->logmessages().data(), static_cast<int>(this->logmessages().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "logmessagetransporter.Messages.logMessages");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->logmessages(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logmessagetransporter.Messages)
  return target;
}

size_t Messages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logmessagetransporter.Messages)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string logMessages = 2;
  if (this->logmessages().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->logmessages());
  }

  // int32 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->size());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Messages::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logmessagetransporter.Messages)
  GOOGLE_DCHECK_NE(&from, this);
  const Messages* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Messages>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logmessagetransporter.Messages)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logmessagetransporter.Messages)
    MergeFrom(*source);
  }
}

void Messages::MergeFrom(const Messages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logmessagetransporter.Messages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.logmessages().size() > 0) {

    logmessages_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logmessages_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void Messages::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logmessagetransporter.Messages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Messages::CopyFrom(const Messages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logmessagetransporter.Messages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Messages::IsInitialized() const {
  return true;
}

void Messages::Swap(Messages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Messages::InternalSwap(Messages* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  logmessages_.Swap(&other->logmessages_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Messages::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Acknowledge::InitAsDefaultInstance() {
}
class Acknowledge::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Acknowledge::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Acknowledge::Acknowledge()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:logmessagetransporter.Acknowledge)
}
Acknowledge::Acknowledge(const Acknowledge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:logmessagetransporter.Acknowledge)
}

void Acknowledge::SharedCtor() {
  result_ = false;
}

Acknowledge::~Acknowledge() {
  // @@protoc_insertion_point(destructor:logmessagetransporter.Acknowledge)
  SharedDtor();
}

void Acknowledge::SharedDtor() {
}

void Acknowledge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Acknowledge& Acknowledge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Acknowledge_LogMessageTransporter_2eproto.base);
  return *internal_default_instance();
}


void Acknowledge::Clear() {
// @@protoc_insertion_point(message_clear_start:logmessagetransporter.Acknowledge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Acknowledge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Acknowledge::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:logmessagetransporter.Acknowledge)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logmessagetransporter.Acknowledge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logmessagetransporter.Acknowledge)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Acknowledge::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logmessagetransporter.Acknowledge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:logmessagetransporter.Acknowledge)
}

::PROTOBUF_NAMESPACE_ID::uint8* Acknowledge::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:logmessagetransporter.Acknowledge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logmessagetransporter.Acknowledge)
  return target;
}

size_t Acknowledge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logmessagetransporter.Acknowledge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Acknowledge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logmessagetransporter.Acknowledge)
  GOOGLE_DCHECK_NE(&from, this);
  const Acknowledge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Acknowledge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logmessagetransporter.Acknowledge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logmessagetransporter.Acknowledge)
    MergeFrom(*source);
  }
}

void Acknowledge::MergeFrom(const Acknowledge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logmessagetransporter.Acknowledge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void Acknowledge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logmessagetransporter.Acknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Acknowledge::CopyFrom(const Acknowledge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logmessagetransporter.Acknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acknowledge::IsInitialized() const {
  return true;
}

void Acknowledge::Swap(Acknowledge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Acknowledge::InternalSwap(Acknowledge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Acknowledge::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace logmessagetransporter
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::logmessagetransporter::Messages* Arena::CreateMaybeMessage< ::logmessagetransporter::Messages >(Arena* arena) {
  return Arena::CreateInternal< ::logmessagetransporter::Messages >(arena);
}
template<> PROTOBUF_NOINLINE ::logmessagetransporter::Acknowledge* Arena::CreateMaybeMessage< ::logmessagetransporter::Acknowledge >(Arena* arena) {
  return Arena::CreateInternal< ::logmessagetransporter::Acknowledge >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
