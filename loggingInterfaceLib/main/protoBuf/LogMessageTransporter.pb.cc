// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogMessageTransporter.proto

#include "LogMessageTransporter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace logmessagetransporter {
class MessagesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessagesRequest> _instance;
} _MessagesRequest_default_instance_;
class AcknowledgeReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcknowledgeReply> _instance;
} _AcknowledgeReply_default_instance_;
}  // namespace logmessagetransporter
static void InitDefaultsscc_info_AcknowledgeReply_LogMessageTransporter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logmessagetransporter::_AcknowledgeReply_default_instance_;
    new (ptr) ::logmessagetransporter::AcknowledgeReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logmessagetransporter::AcknowledgeReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AcknowledgeReply_LogMessageTransporter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AcknowledgeReply_LogMessageTransporter_2eproto}, {}};

static void InitDefaultsscc_info_MessagesRequest_LogMessageTransporter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logmessagetransporter::_MessagesRequest_default_instance_;
    new (ptr) ::logmessagetransporter::MessagesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logmessagetransporter::MessagesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessagesRequest_LogMessageTransporter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MessagesRequest_LogMessageTransporter_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_LogMessageTransporter_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_LogMessageTransporter_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_LogMessageTransporter_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_LogMessageTransporter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::logmessagetransporter::MessagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::logmessagetransporter::MessagesRequest, size_),
  PROTOBUF_FIELD_OFFSET(::logmessagetransporter::MessagesRequest, logmessages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::logmessagetransporter::AcknowledgeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::logmessagetransporter::AcknowledgeReply, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::logmessagetransporter::MessagesRequest)},
  { 7, -1, sizeof(::logmessagetransporter::AcknowledgeReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::logmessagetransporter::_MessagesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::logmessagetransporter::_AcknowledgeReply_default_instance_),
};

const char descriptor_table_protodef_LogMessageTransporter_2eproto[] =
  "\n\033LogMessageTransporter.proto\022\025logmessag"
  "etransporter\"4\n\017MessagesRequest\022\014\n\004size\030"
  "\001 \001(\005\022\023\n\013logMessages\030\002 \003(\t\"\"\n\020Acknowledg"
  "eReply\022\016\n\006result\030\001 \001(\0102}\n\025LogMessageTran"
  "sporter\022d\n\017sendLogMessages\022&.logmessaget"
  "ransporter.MessagesRequest\032\'.logmessaget"
  "ransporter.AcknowledgeReply\"\000B\t\n\007ex.grpc"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_LogMessageTransporter_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_LogMessageTransporter_2eproto_sccs[2] = {
  &scc_info_AcknowledgeReply_LogMessageTransporter_2eproto.base,
  &scc_info_MessagesRequest_LogMessageTransporter_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_LogMessageTransporter_2eproto_once;
static bool descriptor_table_LogMessageTransporter_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LogMessageTransporter_2eproto = {
  &descriptor_table_LogMessageTransporter_2eproto_initialized, descriptor_table_protodef_LogMessageTransporter_2eproto, "LogMessageTransporter.proto", 288,
  &descriptor_table_LogMessageTransporter_2eproto_once, descriptor_table_LogMessageTransporter_2eproto_sccs, descriptor_table_LogMessageTransporter_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_LogMessageTransporter_2eproto::offsets,
  file_level_metadata_LogMessageTransporter_2eproto, 2, file_level_enum_descriptors_LogMessageTransporter_2eproto, file_level_service_descriptors_LogMessageTransporter_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_LogMessageTransporter_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_LogMessageTransporter_2eproto), true);
namespace logmessagetransporter {

// ===================================================================

void MessagesRequest::InitAsDefaultInstance() {
}
class MessagesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessagesRequest::kSizeFieldNumber;
const int MessagesRequest::kLogMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessagesRequest::MessagesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:logmessagetransporter.MessagesRequest)
}
MessagesRequest::MessagesRequest(const MessagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      logmessages_(from.logmessages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:logmessagetransporter.MessagesRequest)
}

void MessagesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessagesRequest_LogMessageTransporter_2eproto.base);
  size_ = 0;
}

MessagesRequest::~MessagesRequest() {
  // @@protoc_insertion_point(destructor:logmessagetransporter.MessagesRequest)
  SharedDtor();
}

void MessagesRequest::SharedDtor() {
}

void MessagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessagesRequest& MessagesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessagesRequest_LogMessageTransporter_2eproto.base);
  return *internal_default_instance();
}


void MessagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:logmessagetransporter.MessagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logmessages_.Clear();
  size_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessagesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string logMessages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_logmessages(), ptr, ctx, "logmessagetransporter.MessagesRequest.logMessages");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessagesRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:logmessagetransporter.MessagesRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 size = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string logMessages = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_logmessages()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->logmessages(this->logmessages_size() - 1).data(),
            static_cast<int>(this->logmessages(this->logmessages_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "logmessagetransporter.MessagesRequest.logMessages"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logmessagetransporter.MessagesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logmessagetransporter.MessagesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MessagesRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logmessagetransporter.MessagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // repeated string logMessages = 2;
  for (int i = 0, n = this->logmessages_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->logmessages(i).data(), static_cast<int>(this->logmessages(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "logmessagetransporter.MessagesRequest.logMessages");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->logmessages(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:logmessagetransporter.MessagesRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* MessagesRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:logmessagetransporter.MessagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  // repeated string logMessages = 2;
  for (int i = 0, n = this->logmessages_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->logmessages(i).data(), static_cast<int>(this->logmessages(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "logmessagetransporter.MessagesRequest.logMessages");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->logmessages(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logmessagetransporter.MessagesRequest)
  return target;
}

size_t MessagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logmessagetransporter.MessagesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string logMessages = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->logmessages_size());
  for (int i = 0, n = this->logmessages_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->logmessages(i));
  }

  // int32 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->size());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logmessagetransporter.MessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessagesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logmessagetransporter.MessagesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logmessagetransporter.MessagesRequest)
    MergeFrom(*source);
  }
}

void MessagesRequest::MergeFrom(const MessagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logmessagetransporter.MessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logmessages_.MergeFrom(from.logmessages_);
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void MessagesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logmessagetransporter.MessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagesRequest::CopyFrom(const MessagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logmessagetransporter.MessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagesRequest::IsInitialized() const {
  return true;
}

void MessagesRequest::Swap(MessagesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessagesRequest::InternalSwap(MessagesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  logmessages_.InternalSwap(CastToBase(&other->logmessages_));
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AcknowledgeReply::InitAsDefaultInstance() {
}
class AcknowledgeReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcknowledgeReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcknowledgeReply::AcknowledgeReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:logmessagetransporter.AcknowledgeReply)
}
AcknowledgeReply::AcknowledgeReply(const AcknowledgeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:logmessagetransporter.AcknowledgeReply)
}

void AcknowledgeReply::SharedCtor() {
  result_ = false;
}

AcknowledgeReply::~AcknowledgeReply() {
  // @@protoc_insertion_point(destructor:logmessagetransporter.AcknowledgeReply)
  SharedDtor();
}

void AcknowledgeReply::SharedDtor() {
}

void AcknowledgeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcknowledgeReply& AcknowledgeReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcknowledgeReply_LogMessageTransporter_2eproto.base);
  return *internal_default_instance();
}


void AcknowledgeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:logmessagetransporter.AcknowledgeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AcknowledgeReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AcknowledgeReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:logmessagetransporter.AcknowledgeReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logmessagetransporter.AcknowledgeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logmessagetransporter.AcknowledgeReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AcknowledgeReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logmessagetransporter.AcknowledgeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:logmessagetransporter.AcknowledgeReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* AcknowledgeReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:logmessagetransporter.AcknowledgeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logmessagetransporter.AcknowledgeReply)
  return target;
}

size_t AcknowledgeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logmessagetransporter.AcknowledgeReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcknowledgeReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logmessagetransporter.AcknowledgeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AcknowledgeReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcknowledgeReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logmessagetransporter.AcknowledgeReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logmessagetransporter.AcknowledgeReply)
    MergeFrom(*source);
  }
}

void AcknowledgeReply::MergeFrom(const AcknowledgeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logmessagetransporter.AcknowledgeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void AcknowledgeReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logmessagetransporter.AcknowledgeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcknowledgeReply::CopyFrom(const AcknowledgeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logmessagetransporter.AcknowledgeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcknowledgeReply::IsInitialized() const {
  return true;
}

void AcknowledgeReply::Swap(AcknowledgeReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcknowledgeReply::InternalSwap(AcknowledgeReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AcknowledgeReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace logmessagetransporter
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::logmessagetransporter::MessagesRequest* Arena::CreateMaybeMessage< ::logmessagetransporter::MessagesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::logmessagetransporter::MessagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::logmessagetransporter::AcknowledgeReply* Arena::CreateMaybeMessage< ::logmessagetransporter::AcknowledgeReply >(Arena* arena) {
  return Arena::CreateInternal< ::logmessagetransporter::AcknowledgeReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
