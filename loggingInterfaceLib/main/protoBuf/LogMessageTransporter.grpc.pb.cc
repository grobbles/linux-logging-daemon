// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: LogMessageTransporter.proto

#include "LogMessageTransporter.pb.h"
#include "LogMessageTransporter.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace logmessagetransporter {

static const char* LogMessageTransporter_method_names[] = {
  "/logmessagetransporter.LogMessageTransporter/sendLogMessages",
};

std::unique_ptr< LogMessageTransporter::Stub> LogMessageTransporter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LogMessageTransporter::Stub> stub(new LogMessageTransporter::Stub(channel));
  return stub;
}

LogMessageTransporter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_sendLogMessages_(LogMessageTransporter_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LogMessageTransporter::Stub::sendLogMessages(::grpc::ClientContext* context, const ::logmessagetransporter::MessagesRequest& request, ::logmessagetransporter::AcknowledgeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_sendLogMessages_, context, request, response);
}

void LogMessageTransporter::Stub::experimental_async::sendLogMessages(::grpc::ClientContext* context, const ::logmessagetransporter::MessagesRequest* request, ::logmessagetransporter::AcknowledgeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendLogMessages_, context, request, response, std::move(f));
}

void LogMessageTransporter::Stub::experimental_async::sendLogMessages(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::logmessagetransporter::AcknowledgeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendLogMessages_, context, request, response, std::move(f));
}

void LogMessageTransporter::Stub::experimental_async::sendLogMessages(::grpc::ClientContext* context, const ::logmessagetransporter::MessagesRequest* request, ::logmessagetransporter::AcknowledgeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_sendLogMessages_, context, request, response, reactor);
}

void LogMessageTransporter::Stub::experimental_async::sendLogMessages(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::logmessagetransporter::AcknowledgeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_sendLogMessages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::logmessagetransporter::AcknowledgeReply>* LogMessageTransporter::Stub::AsyncsendLogMessagesRaw(::grpc::ClientContext* context, const ::logmessagetransporter::MessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::logmessagetransporter::AcknowledgeReply>::Create(channel_.get(), cq, rpcmethod_sendLogMessages_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::logmessagetransporter::AcknowledgeReply>* LogMessageTransporter::Stub::PrepareAsyncsendLogMessagesRaw(::grpc::ClientContext* context, const ::logmessagetransporter::MessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::logmessagetransporter::AcknowledgeReply>::Create(channel_.get(), cq, rpcmethod_sendLogMessages_, context, request, false);
}

LogMessageTransporter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LogMessageTransporter_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LogMessageTransporter::Service, ::logmessagetransporter::MessagesRequest, ::logmessagetransporter::AcknowledgeReply>(
          std::mem_fn(&LogMessageTransporter::Service::sendLogMessages), this)));
}

LogMessageTransporter::Service::~Service() {
}

::grpc::Status LogMessageTransporter::Service::sendLogMessages(::grpc::ServerContext* context, const ::logmessagetransporter::MessagesRequest* request, ::logmessagetransporter::AcknowledgeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace logmessagetransporter

